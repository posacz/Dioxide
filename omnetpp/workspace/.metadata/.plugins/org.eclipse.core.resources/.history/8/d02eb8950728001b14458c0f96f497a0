/*
 * Monoxide.cc
 *
 *  Created on: Oct 30, 2020
 *      Author: qucheng
 */


#include <string>

#include "common/UnderlayConfigurator.h"
#include "common/GlobalStatistics.h"

#include "applications/monoxide/Monoxide_m.h"

#include "applications/monoxide/Monoxide.h"

#include "common/InitStages.h"

Define_Module(Monoxide);

int Monoxide::global_index = 0;
int Monoxide::global_tx_id = 1;
int Monoxide::global_block_id = 1;

static inline int get_zone_id(const int& pub_key, const int& sharding_scale){
    return pub_key & ((1<<sharding_scale)-1);
}

// initializeApp() is called when the module is being created.
// Use this function instead of the constructor for initializing variables.
void Monoxide::initializeApp(int stage)
{
    // initializeApp will be called twice, each with a different stage.
    // stage can be either MIN_STAGE_APP (this module is being created),
    // or MAX_STAGE_APP (all modules were created).
    // We only care about MIN_STAGE_APP here.

    if (stage != MIN_STAGE_APP) return;

    // copy the module parameter values to our own variables
    sharding_scale = par("sharding_scale");
    n_full_nodes = par("n_full_nodes");
    n_miners = par("n_miners");
    n_coordinators = par("n_coordinators");

    block_interval = par("block_interval");
    block_size = par("block_size");

    // set node parameters
    srt_key = global_index++; // set srt_key be a incremental value
    pub_key = srt_key; // only for simulation, set pub_key = srt_key

    n_zones = (1<<sharding_scale);

    /* each zone: n_full_nodes*n_coordinators full nodes, n_miners*n_coordinators/n_zones miners
     * pub_key:
     * 0 ~ n_full_nodes*n_coordinators*n_zones : ROLE_FULL_NODE
     *   + 0 ~ n_zones-1 : coordinator 0
     *   + n_zones ~ 2*n_zones-1 : coordinator 1
     *     ...
     * n_full_nodes*n_coordinators*n_zones ~ (n_full_nodes*n_zones+n_miners)*n_coordinators : ROLE_MINER
     *   + 0 ~ n_miners-1 : coordinator 0
     *   + n_miners ~ 2*n_miners-1 : coordinator 1
     *     ...
     */
    int total_full_nodes = n_full_nodes * n_coordinators * n_zones;
    if (pub_key < total_full_nodes){ // full node
        zone_id = get_zone_id(pub_key, sharding_scale);
        coordinator_id = pub_key / n_zones;
        role = ROLE_FULL_NODE;
    } else { // miner
        role = ROLE_MINER;
        coordinator_id = (pub_key-total_full_nodes) / n_miners;
        if ((pub_key-total_full_nodes) % n_miners == 0){ // first miner as coordinator
            role |= ROLE_COORDINATOR;
            full_node_id_base = coordinator_id*n_zones;
        }
    }
    coordinator_id = (coordinator_id*n_miners) + total_full_nodes;

    // initialize our statistics variables
    numSent = 0;
    numReceived = 0;

    // tell the GUI to display our variables
    WATCH(numSent);
    WATCH(numReceived);

    if (role == ROLE_FULL_NODE){
        // *. FULL_NODEs init with initial Transaction, no inbound RelayTransaction at bootstrap
        // create transaction pool and init blockchain structure
        tx_pool = new TransactionPool();
        blockchain = new Blockchain();

        // 1. FULL_NODEs generate new TransactionBlock and ChainBlock with Transaction and confirmed inbound RelayTransaction.
        // generate a chain block, filled with initial transactions
        tx_block = new TransactionBlock();
        for (int i = 0; i < 100; ++i){
            Transaction *tx = new Transaction();
            tx_block->txs.push_back(tx);
        }
        // create merkle tree
        tx_block->buildBlock(coordinator_id);

        // 2. FULL_NODEs send ChainBlock to COORDINATOR.
        // send block header to coordinator
        OverlayKey coordinatorKey(coordinator_id);
        ChainBlockMessage *chainBlockMsg = new ChainBlockMessage();
        ChainBlock &chainBlock = chainBlockMsg->getChainBlock();
        chainBlock.version = blockchain->last_block->version + 1; // we use version to store the block height
        chainBlock.scale = sharding_scale;
        chainBlock.index = zone_id;
        chainBlock.prev_hash = blockchain->last_block->hash(); // previous block hash
        chainBlock.timestamp = static_cast<int>(simTime().dbl());
        chainBlock.pow_target = block_interval; // we use this to indicate average block time
        chainBlock.confirmed_root = tx_block->confirmedRoot();
        chainBlock.outbound_root = tx_block->outboundRoot();

        chainBlockMsg->setType(MMSG_BLOCK); // set the message type to PING
        chainBlockMsg->setSenderAddress(thisNode); // set the sender address to our own
        chainBlockMsg->setByteLength(100); // set the message length to 100 bytes

        numSent++; // update statistics

        EV << thisNode.getIp() << ": Sending ChainBlock to "
           << coordinatorKey << "!" << std::endl;

        callRoute(coordinatorKey, chainBlockMsg); // send it to the coordinator through overlay
    } else if (role & ROLE_MINER){
        timerMsg = new cMessage("Miner Timer");
        puzzleMsg = nullptr;
    } else if (role & ROLE_COORDINATOR){
        // coordinator init the block list
        block_list = new ChainBlockList(n_zones);
        for (int i=0; i<n_zones; ++i){
            block_list->headers.push_back(nullptr);
        }
    }

    bindToPort(2000);
}


// finish is called when the module is being destroyed
void Monoxide::finishApp()
{
    // finish() is usually used to save the module's statistics.
    // We'll use globalStatistics->addStdDev(), which will calculate min, max, mean and deviation values.
    // The first parameter is a name for the value, you can use any name you like (use a name you can find quickly!).
    // In the end, the simulator will mix together all values, from all nodes, with the same name.

    globalStatistics->addStdDev("Monoxide: Sent packets", numSent);
    globalStatistics->addStdDev("Monoxide: Received packets", numReceived);
}


// handleTimerEvent is called when a timer event triggers
void Monoxide::handleTimerEvent(cMessage* msg)
{
    // is this our timer?
    if (msg != timerMsg) {
        delete msg;
        return;
    }

    // if the simulator is still busy creating the network,
    // let's wait a bit longer
    if (underlayConfigurator->isInInitPhase()) return;

    if (role == ROLE_FULL_NODE){

    } else if (role == ROLE_MINER){
        // pow finished
        // 6. MINERs send PoWNonce to COORDINATOR.
        PoWNonceMessage *powNonceMsg = new PoWNonceMessage();
        powNonceMsg->setType(MMSG_POW_NONCE);
        powNonceMsg->setSenderAddress(thisNode);
        powNonceMsg->setByteLength(20);
        PoWNonce& powNonce = powNonceMsg->getPowNonce();
        PoWPuzzle& powPuzzle = puzzleMsg->getPowPuzzle();
        powNonce.base_index = powPuzzle.base_index;
        powNonce.batch_scale = powPuzzle.batch_scale;
        powNonce.batch_size = powPuzzle.batch_size;
        powNonce.block_list_root = powPuzzle.block_list_root;
        powNonce.pow_nonce = 0;
        delete puzzleMsg;
        puzzleMsg = nullptr;
        callRoute(coordinator_id, powNonceMsg);
    }
}

// deliver() is called when we receive a message from the overlay.
// Unknown packets can be safely deleted here.
void Monoxide::deliver(OverlayKey& key, cMessage* msg)
{
    // we are only expecting messages of type DioxideMessage, throw away any other
    MonoxideMessage *monoxideMsg = dynamic_cast<MonoxideMessage*>(msg);
    if (monoxideMsg == nullptr) {
        delete msg; // type unknown!
        return;
    }
    EV << thisNode.getIp() << ": Got packet from "
       << monoxideMsg->getSenderAddress() << std::endl;
    int msgType = monoxideMsg->getType();
    if (role & ROLE_COORDINATOR){
        if (msgType == MMSG_BLOCK){
            ChainBlockMessage *chainBlockMsg = dynamic_cast<ChainBlockMessage*>(monoxideMsg);
            // 3. COORDINATOR gather ChainBlocks and form ChainBlockList.
            ChainBlock *chainBlock = new ChainBlock(chainBlockMsg->getChainBlock());
            block_list->add(chainBlock);
            if (block_list->size==n_zones){
                // 4. COORDINATOR generate PoWPuzzle and send to MINERs.
                block_list->buildTree();
                PoWPuzzleMessage *powPuzzleMsg = new PoWPuzzleMessage();
                powPuzzleMsg->setType(MMSG_POW_PUZZLE);
                powPuzzleMsg->setSenderAddress(thisNode);
                powPuzzleMsg->setByteLength(16);
                PoWPuzzle &powPuzzle = powPuzzleMsg->getPowPuzzle();
                powPuzzle.base_index = 0;
                powPuzzle.batch_size = n_zones;
                powPuzzle.batch_scale = sharding_scale;
                powPuzzle.block_list_root = block_list->root_hash();
                for (int i=1; i<n_miners; ++i){
                    // send to other miners
                    callRoute(pub_key+i, powPuzzleMsg->dup());
                }
                // send to self
                deliver(key, powPuzzleMsg);
            }
        } else if (msgType == MMSG_POW_NONCE){
            PoWNonceMessage *powNonceMsg = dynamic_cast<PoWNonceMessage*>(monoxideMsg);
            if (block_list->size>0){
                PoWNonce& powNonce = powNonceMsg->getPowNonce();
                // 7. COORDINATOR generate BatchChainBlock for each zone.
                for (int id=0; id<block_list->size; ++id){
                    // 8. COORDINATOR send BatchChainBlock to FULL_NODEs.
                    ChainBlock& chainBlock = *block_list->headers[id];
                    BatchChainBlockMessage *batchChainBlockMsg = new BatchChainBlockMessage();
                    batchChainBlockMsg->setType(MMSG_BATCH_BLOCK);
                    batchChainBlockMsg->setSenderAddress(thisNode);
                    batchChainBlockMsg->setByteLength(120);
                    BatchChainBlock& batchChainBlock = batchChainBlockMsg->getBatchChainBlock();
                    batchChainBlock.version = chainBlock.version;
                    batchChainBlock.scale = chainBlock.scale;
                    batchChainBlock.index = chainBlock.index;
                    batchChainBlock.prev_hash = chainBlock.prev_hash;
                    batchChainBlock.timestamp = chainBlock.timestamp;
                    batchChainBlock.pow_target = chainBlock.pow_target;
                    batchChainBlock.confirmed_root = chainBlock.confirmed_root;
                    batchChainBlock.outbound_root = chainBlock.outbound_root;

                    batchChainBlock.base_index = powNonce.base_index;
                    batchChainBlock.batch_size = powNonce.batch_size;
                    batchChainBlock.batch_scale = powNonce.batch_scale;
                    batchChainBlock.batch_pow_nonce = powNonce.pow_nonce;

                    batchChainBlock.header_path = block_list->header_tree->generatePath(id);

                    // only for simulation use, get block hashvalue from global variable
                    batchChainBlock.hashvalue = global_block_id++;

                    callRoute(full_node_id_base+id, batchChainBlockMsg);
                }
                block_list->clear();
            }
            delete powNonceMsg;
        } else {
            delete monoxideMsg;
        }
    } else if (role & ROLE_MINER) {
        if (msgType == MMSG_POW_PUZZLE){
            puzzleMsg = dynamic_cast<PoWPuzzleMessage*>(monoxideMsg);
            // 5. MINERs calculate PoWPuzzle and get PoWNonce.
            int total_miners = n_miners * n_coordinators;
            double block_time = block_interval / (double)total_miners;
            block_time = exponential(block_time);
            // cancel previous puzzle
            if (timerMsg->isScheduled()){
                cancelEvent(timerMsg);
            }
            // wait for block time to get the PoWNonce
            scheduleAt(simTime() + block_time, timerMsg);
        } else {
            delete monoxideMsg;
        }
    } else if (role == ROLE_FULL_NODE) {
        if (msgType == MMSG_BATCH_BLOCK){
            // this is a batch chain block header send by our coordinator
            BatchChainBlockMessage *batchChainBlockMsg = dynamic_cast<BatchChainBlockMessage*>(monoxideMsg);
            BatchChainBlock &batchChainBlock = batchChainBlockMsg->getBatchChainBlock();
            if (blockchain->new_block(batchChainBlock)){ // is a valid block
                // 14. FULL_NODEs broadcast BatchChainBlock in zone if the BatchChainBlock is valid.
                batchChainBlockMsg->setType(MMSG_FULL_BLOCK);
                batchChainBlockMsg->setByteLength(block_size);
                for (int dest_id = zone_id; dest_id < zone_id*n_zones; dest_id += n_zones){
                    if (dest_id != pub_key){ // it is me
                        callRoute(dest_id, batchChainBlockMsg.dup());
                    }
                }
            }
            // delete this origin message
            delete batchChainBlockMsg;
        } else if (msgType == MMSG_FULL_BLOCK){
            // this is a full batch chain block send by other full nodes
            BatchChainBlockMessage *batchChainBlockMsg = dynamic_cast<BatchChainBlockMessage*>(monoxideMsg);
            BatchChainBlock &batchChainBlock = batchChainBlockMsg->getBatchChainBlock();
            // 15. FULL_NODEs receive BatchChainBlock, store into Blockchain if the BatchChainBlock is valid. (jump 0)
            blockchain->new_block(batchChainBlock);
            delete batchChainBlockMsg;
        } else {
            delete monoxideMsg;
        }
    } else {
        delete monoxideMsg;
    }
    // send it back to its owner
    //sendMessageToUDP(monoxideMsg->getSenderAddress(), monoxideMsg);
}

// handleUDPMessage() is called when we receive a message from UDP.
// Unknown packets can be safely deleted here.
void Monoxide::handleUDPMessage(cMessage* msg)
{
    // we are only expecting messages of type DioxideMessage
    MonoxideMessage *monoxideMsg = dynamic_cast<MonoxideMessage*>(msg);

    if (monoxideMsg) {
        numReceived++;
    }

    // Message isn't needed any more -> delete it
    delete msg;
}
