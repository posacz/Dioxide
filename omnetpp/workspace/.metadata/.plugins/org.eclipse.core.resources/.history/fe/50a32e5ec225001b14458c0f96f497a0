/*
 * Monoxide.h
 *
 * This application simulated mining facility.
 * Mining facility workflow:
 * *. FULL_NODEs init with initial Transaction, no inbound RelayTransaction at bootstrap (jump 1)
 * 0. FULL_NODEs gather Transaction from clients and inbound RelayTransaction from other FULL_NODEs.
 * 1. FULL_NODEs generate new TransactionBlock and ChainBlock with Transaction and confirmed inbound RelayTransaction.
 * 2. FULL_NODEs send ChainBlock to COORDINATOR.
 * FULL_NODE ===ChainBlock===> COORDINATOR
 * 3. COORDINATOR gather ChainBlocks and form ChainBlockList.
 * 4. COORDINATOR generate PoWPuzzle and send to MINERs.
 * COORDINATOR ===PoWPuzzle(broadcast)===> MINER
 * 5. MINERs calculate PoWPuzzle and get PoWNonce.
 * 6. MINERs send PoWNonce to COORDINATOR.
 * MINER ===PoWNonce===> COORDINATOR
 * 7. COORDINATOR generate BatchChainBlock for each zone.
 * 8. COORDINATOR send BatchChainBlock to FULL_NODEs.
 * COORDINATOR ===BatchChainBlock===> FULL_NODE (jump 9, 14)
 * 9. FULL_NODEs generate outbound Transaction from TransactionBlock.
 * 10. FULL_NODEs generate forwarded RelayTransaction from outbound Transactions.
 * 11. FULL_NODEs send forwarded RelayTransaction to target zone.
 * FULL_NODE ===RelayTransaction===> FULL_NODE
 * 12. FULL_NODEs in target zone receive forwarded RelayTransaction and broadcast in zone.
 * FULL_NODE ===RelayTransaction(broadcast)===> FULL_NODE
 * 13. FULL_NODEs store forwarded RelayTransaction into TransactionPool. (done)
 * 14. FULL_NODEs broadcast BatchChainBlock in zone.
 * FULL_NODE ===BatchChainBlock(broadcast)===> FULL_NODE
 * 15. FULL_NODEs receive BatchChainBlock, store into BLockchain. (jump 0)
 *
 *  Created on: Oct 30, 2020
 *      Author: qucheng
 */

#ifndef APPLICATIONS_MONOXIDE_MONOXIDE_H_
#define APPLICATIONS_MONOXIDE_MONOXIDE_H_

#include "common/OverSimDefs.h"

#include "common/BaseApp.h"

#include "Monoxide_m.h"
#include "Blockchain.h"

class Monoxide : public BaseApp
{
    // shared global parameters
    static int global_index; // for fast assign node id
    static int global_tx_id; // for fast assign tx hash
    static int global_block_id; // for fast assign block hash

    // module parameters
    int sharding_scale; // how many zones, numbers of zones is (1<<sharding_scale)
    int n_coordinators; // how many mining facilities total
    int n_full_nodes; // how many full nodes in each zone of one mining facility, must be 1
    int n_miners; // how many miners in one mining facility

    int block_interval; //ms
    int block_size; //kB

    // derived parameters
    int n_zones;

    enum{
        ROLE_FULL_NODE=0,
        ROLE_MINER=1,
        ROLE_COORDINATOR=2
    };

    // node parameters
    int pub_key, srt_key; // the global id of this node
    int coordinator_id; // the mining facility id
    int zone_id; // the zone id (if it is not miner)
    int role; // full node, miner, or mining coordinator

    // the block chain structure (for simulation, while not store any block)
    Blockchain *blockchain;
    TransactionBlock *tx_block; // for storing transactions
    TransactionPool *tx_pool; // for storing inbound relay transactions

    ChainBlockList *block_list; // for coordinator storing ChainBlockList

    PoWPuzzleMessage *puzzleMsg; // for store the puzzle

    // statistics
    int numSent;              //number of packets sent
    int numReceived;          //number of packets received

    // our timer
    cMessage *timerMsg = nullptr;

    // application routines
    void initializeApp(int stage);                 // called when the module is being created
    void finishApp();                              // called when the module is about to be destroyed
    void handleTimerEvent(cMessage* msg);          // called when we received a timer message
    void deliver(OverlayKey& key, cMessage* msg);  // called when we receive a message from the overlay
    void handleUDPMessage(cMessage* msg);          // called when we receive a UDP message

public:
    Monoxide() { timerMsg = NULL; };
    ~Monoxide() { cancelAndDelete(timerMsg); };
};

#endif /* APPLICATIONS_MONOXIDE_MONOXIDE_H_ */
