/*
 * Blockchain.c
 *
 *  Created on: Nov 3, 2020
 *      Author: qucheng
 */

#include "Blockchain.h"

#include <algorithm>

MerkleTreePath::~MerkleTreePath(){
    MerkleTreePathNode *leaf = this->leaf, *next_leaf = nullptr;
    while (leaf->parent != nullptr){
        next_leaf = leaf->parent;
        delete leaf;
        leaf = next_leaf;
    }
}

TransactionBlock::TransactionBlock(){
    tx_tree = nullptr;
    outbound_tx_tree = nullptr;
}

TransactionBlock::~TransactionBlock(){
    delete tx_tree;
    delete outbound_tx_tree;
}

void TransactionBlock::buildBlock(int miner){
    CoinbaseTransaction *tx = new CoinbaseTransaction(miner);
    txs.push_back(tx);
    tx_tree = new MerkleTree<BaseTransaction>(&txs);

    // outbound transactions
    outbound_tx_tree = new MerkleTree<Transaction>(&outbound_txs);
}

int TransactionBlock::confirmedRoot() const{
    return tx_tree->root->hashvalue;
}

int TransactionBlock::outboundRoot() const{
    // outbound tx may be not exists
    if (outbound_tx_tree->root == nullptr){
        return 0;
    }
    return outbound_tx_tree->root->hashvalue;
}

void TransactionBlock::clear(){
    delete tx_tree;
    delete outbound_tx_tree;
    tx_tree = nullptr;
    outbound_tx_tree = nullptr;
    outbound_txs.clear();
    txs.clear();
}

void TransactionBlock::remove_duplicate(const TransactionBlock& tx_block){
    if (outbound_tx_tree != nullptr){ // clear outbound txs if exists
        delete outbound_tx_tree;
        outbound_tx_tree = nullptr;
        outbound_txs.clear();
    }
    for (auto itb = tx_block.txs.begin(); itb != tx_block.txs.end(); ++itb){
        for (auto ita = txs.begin(); ita != txs.end();){
            if ((*ita)->hash() == (*itb)->hash()){
                // remove *ita
                ita = txs.erase(ita);
            } else {
                ++ita;
            }
        }
    }
}

Blockchain::Blockchain(const BatchChainBlock &genesis_block){
    block_tree.emplace_back(genesis_block);
    last_block = &block_tree.back();
    append_block_info(genesis_block);
    latest_block = last_block;
}

Blockchain::~Blockchain(){
}

void Blockchain::append_block_info(const BatchChainBlock &block){
    int size = outbound_root_history.size();
    outbound_root_history.push_back(block.outbound_root);
    block_height_history.push_back(block.version);
    prev_hash_history.push_back(block.prev_hash);
    block_hash_index[block.hash()] = size;
}

void Blockchain::prune(){
    // clean block with too low block height here
    // skip
}

bool Blockchain::store_fork_block(const BatchChainBlock &fork_block){
    if (fork_block.version + N_CONFIRM < last_block->version){
        // ignore block height less than current height - N_CONFIRM
        return false;
    }
    // can we find previous block in block_tree?
    for (auto it = block_tree.begin(); it != block_tree.end(); ++it){
        if (fork_block.prev_hash == it->hash() && fork_block.version == it->version + 1){
            assert(last_block != &(*it)); // this should not happen in a fork
            // found previous block, append fork block
            block_tree.emplace_back(fork_block);
            append_block_info(fork_block);
            latest_block = &(*it);
            if (fork_block.version > last_block->version){
                // we need to replace the block chain with this fork
                // this case is rare, since orphan rate is low when block interval is large
                last_block = &(*it);
                prune();
            }
            return true;
        }
    }
    // we can not find previous block, may be a block come earlier than the previous block
    // this case should be very rare in simulation environment when network delay is constant and small
    // without block buffer and block synchronize mechanism, we treat this as an error now
    throw "store_fork_block: Previous block not found.";
    // only for simulation, here we skip validation of transaction block and some field of batch chain block
}

bool Blockchain::store_new_block(const BatchChainBlock &new_block){
    if (new_block.version != last_block->version+1){
        // block height not match
        return false;
    }
    if (last_block->hash() != new_block.prev_hash){
        // block hash not match
        return false;
    }
    // only for simulation, here we skip validation of transaction block and some field of batch chain block
    // find last block in block_tree
    for (auto it = block_tree.begin(); it != block_tree.end(); ++it){
        if (&(*it) == last_block){
            // only for simulation, we delete last block without storing it into disk or database
            block_tree.emplace_back(new_block);
            last_block = &block_tree.back();
            append_block_info(new_block);
            latest_block = &block_tree.back();
            prune();
            return true;
        }
    }
    throw "store_new_block: Previous block not found.";
}

int Blockchain::new_block(const BatchChainBlock &block){
    // return true if the block is stored
    if (store_new_block(block)){ // this is a valid new block in block chain
        return BLOCK_STATE_NEW;
    }
    if (store_fork_block(block)){
        ++fork_count;
        return BLOCK_STATE_FORK;
    }
    return BLOCK_STATE_INVALID;
}

int Blockchain::check_relay_transaction(const RelayTransaction &relay_tx){
    int cur_hash = last_block->hash();
    int cur_index = block_hash_index[cur_hash];
    int cur_height = last_block->version;
    if (relay_tx.orig_block_height + N_CONFIRM > cur_height){
        return RELAY_TX_AVAILABLE;
    }
    for (int h = cur_height; h >= relay_tx.orig_block_height; --h){
        cur_hash = prev_hash_history[cur_index];
        cur_index = block_hash_index[cur_hash];
        cur_height = block_height_history[cur_index];
    }
    assert(cur_height == relay_tx.orig_block_height);
    if (relay_tx.relay_tx_path->root->hashvalue == outbound_root_history[cur_index]){
        return RELAY_TX_CONFIRMED;
    }
    return RELAY_TX_INVALID;
}

