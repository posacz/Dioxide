/*
 * Blockchain.c
 *
 *  Created on: Nov 3, 2020
 *      Author: qucheng
 */

#include "Blockchain.h"

#include <algorithm>

MerkleTreePath::~MerkleTreePath(){
    MerkleTreePathNode *leaf = this->leaf, *next_leaf = nullptr;
    while (leaf->parent != nullptr){
        next_leaf = leaf->parent;
        delete leaf;
        leaf = next_leaf;
    }
}

TransactionBlock::TransactionBlock(){
    tx_tree = nullptr;
    outbound_tx_tree = nullptr;
}

TransactionBlock::~TransactionBlock(){
    delete tx_tree;
    delete outbound_tx_tree;
}

void TransactionBlock::buildBlock(int miner){
    CoinbaseTransaction *tx = new CoinbaseTransaction(miner);
    txs.push_back(tx);
    tx_tree = new MerkleTree<BaseTransaction>(&txs);

    // outbound transactions
    outbound_tx_tree = new MerkleTree<Transaction>(&outbound_txs);
}

int TransactionBlock::confirmedRoot() const{
    return tx_tree->root->hashvalue;
}

int TransactionBlock::outboundRoot() const{
    // outbound tx may be not exists
    if (outbound_tx_tree->root == nullptr){
        return 0;
    }
    return outbound_tx_tree->root->hashvalue;
}

void TransactionBlock::clear(){
    delete tx_tree;
    delete outbound_tx_tree;
    tx_tree = nullptr;
    outbound_tx_tree = nullptr;
    outbound_txs.clear();
    txs.clear();
}

Blockchain::Blockchain(){
    // generate genesis block
    BatchChainBlock *genesis_block = new BatchChainBlock();
    genesis_block->version = 0;
    genesis_block->prev_hash = 0;
    genesis_block->tx_block = nullptr;
    genesis_block->hashvalue = 0;

    last_block = genesis_block;
    block_tree.push_back(last_block);
}

Blockchain::~Blockchain(){
    for (auto it = block_tree.begin(); it != block_tree.end(); ++it){
        delete *it;
    }
}

void Blockchain::clean_fork(){
    // we should clean fork with too low block height here
    // skip
}

bool Blockchain::validate_fork_block(BatchChainBlock *fork_block){
    if (fork_block->prev_hash == 0 && fork_block->version == 1){
        // this is the first block
        if (last_block->version > N_CONFIRM){
            // ignore block height less than current height - N_CONFIRM
            return false;
        }
        return true;
    }
    if (fork_block->version + N_CONFIRM < last_block->version){
        // ignore block height less than current height - N_CONFIRM
        return false;
    }
    // can we find previous block in block_tree?
    for (auto it = block_tree.begin(); it != block_tree.end(); ++it){
        if (fork_block->prev_hash == (*it)->prev_hash && fork_block->version == (*it)->version + 1){
            assert(last_block != *it); // this should not happen in a fork
            // found previous block, replace it
            delete *it;
            *it = fork_block;
            if (fork_block->version > last_block->version){
                // we need to replace the block chain with this fork
                last_block = fork_block;;
            }
            break;
        }
    }
    // we can not find previous block, may be a block come earlier than the previous block
    // this case should be very rare in simulation environment when network delay is constant and small
    // without block buffer and block synchronize mechanism, we treat this as an error now
    throw "Previous block not found";
    // only for simulation, here we skip validation of transaction block and some field of batch chain block
}

void Blockchain::store_fork_block(BatchChainBlock *fork_block){

}

bool Blockchain::validate_new_block(BatchChainBlock *new_block){
    if (new_block->version != last_block->version+1){
        // block height not match
        return false;
    }
    if (last_block->hash() != new_block->prev_hash){
        // block hash not match
        return false;
    }
    // only for simulation, here we skip validation of transaction block and some field of batch chain block
    return true;
}

void Blockchain::store_new_block(BatchChainBlock *new_block){
    // find last block in block_tree
    std::vector<BatchChainBlock*>::iterator result = block_tree.end();
    for (auto it = block_tree.begin(); it != block_tree.end(); ++it){
        if (*it == last_block){
            result = it;
            break;
        }
    }
    assert(result != block_tree.end());
    // replace last block with new block
    // only for simulation, we delete last block without storing it into disk or database
    delete *result;
    *result = new_block;
    last_block = new_block;
    clean_fork();
}

bool Blockchain::new_block(BatchChainBlock *block){
    if (validate_new_block(block)){ // this is a valid new block
        store_new_block(new BatchChainBlock(*block));
    } else if (validate_fork_block(block)){
        store_fork_block(new BatchChainBlock(*block));
    } else {
        // block should be dropped
        return false;
    }
    // block is saved
    return true;
}
